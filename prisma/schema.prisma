// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_role {
  ADMIN // Admin is the super user of the system
  STAFF // Staff is a user who can manage the system
  USER // User is a user who can use the system
}

enum StoreMemberRole {
  OWNER
  MEMBER
}

enum user_status {
  ACTIVE // Active is a user who is active in the system
  INACTIVE // Inactive is a user who is inactive in the system
  SUSPENDED // Suspended is a user who is suspended in the system
}

enum order_status {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  RETURNED
}

enum inventory_status {
  ACTIVE
  INACTIVE
  SOLD
}

enum product_status {
  ACTIVE
  INACTIVE
  SOLD
}

enum stock_movement_type {
  // Adjust the stock of a product by adding or subtracting the stock (for example: add 10 units to the stock)
  ADJUSTMENT
  // Purchase the stock of a product from a supplier to the store (for example: purchase 10 units of a product from a supplier) 
  PURCHASE
  // Sale the stock of a product to a customer (for example: sell 10 units of a product to a customer)
  SALE
  // Return the stock of a product from a customer to the supplier (for example: return 10 units of a product to the supplier)
  RETURN_PURCHASE
  // Return the stock of a product from the customer to the supplier (for example: return 10 units of a product to the customer)
  RETURN_SALE
  // Transfer the stock of a product from one store to another store (for example: transfer 10 units of a product from one store to another store)
  TRANSFER
}

enum payment_method {
  CASH
  CREDIT_CARD
  DEBIT_CARD
}

/**
 * User model
 * User is a model that represents the user of the system
 * It is used to track the user of the system
 * User has many products
 */
model User {
  id          String      @id @default(uuid()) @db.Uuid
  email       String      @unique
  password    String
  username    String      @unique
  role        user_role   @default(USER)
  status      user_status @default(ACTIVE)
  is_verified Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  refresh_token String?

  // code 
  verification_code String?
  verification_code_expired DateTime? 
  password_reset_code String?
  password_reset_code_expired DateTime?

  // relations
  ownedStores      Store[] // user is owner of the store
  memberships      StoreMember[] // user is member of the store
  products_created Product[] // user is creator of the product
  orders_cashier   Order[] // user is cashier of the order

  // indexes
  @@index([role, status])

  @@map("user")
}

/**
 * Store model
 * Store is a model that represents the store of the system
 * It is used to track the store of the system
 * Store has many products
 * Store has many members
 */
model Store {
  id          String   @id @default(uuid()) @db.Uuid
  owner_id    String   @db.Uuid
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  owner            User               @relation(fields: [owner_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  members          StoreMember[]
  products         Product[]
  categories       Category[]
  customer         Customer[]
  statistics_daily StatisticsDaily[]

  // indexes
  @@index([owner_id])
  @@index([name])

  @@map("store")
}

/**
 * Store member model
 * Store member is a model that represents the member of a store
 * It is used to track the member of a store
 * Store member has one store
 * Store member has one user
 */
model StoreMember {
  storeId   String          @db.Uuid
  userId    String          @db.Uuid
  role      StoreMemberRole @default(MEMBER)
  createdAt DateTime        @default(now())

  // relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // indexes
  @@id([storeId, userId])
  @@index([userId])

  @@map("store_member")
}

/**
 * Order customer model
 * Order customer is a model that represents the customer of an order
 * It is used to track the customer of an order
 * Order customer has one order
 * Order customer has one user
 */
model Customer {
  id        String   @unique @default(uuid()) @db.Uuid
  store_id  String   @db.Uuid
  name      String
  phone     String?
  email     String?
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relations
  store     Store    @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders    Order[]

  // indexes
  @@id([store_id, id])
  @@index([store_id])

  @@map("customer")
}

/**
 * Product model
 * Product is a model that represents the product of a product
 * It is used to track the product of a product
 * Product has many inventories
 * Product has one user
 */
model Product {
  id              String           @id @default(uuid()) @db.Uuid
  store_id        String           @db.Uuid
  name            String
  sku             String           @unique
  barcode         String?
  price           Int              @default(0)
  cost            Int              @default(0)
  image_url       String?
  description     String?
  product_status  product_status   @default(ACTIVE)
  meta            Json             @default("{}")
  created_by      String           @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // relations
  created_by_user User             @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Cascade)
  store           Store            @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categories      Category[]
  inventories     Inventory[]
  tags            Tag[]
  stock_movements StockMovement[]
  order_item      OrderItem[]

  // indexes
  @@index([created_by, product_status, name])

  @@map("product")
}

/**
 * Inventory model
 * Inventory is a model that represents the inventory of a product
 * It is used to track the inventory of a product
 */
model Inventory {
  id         String           @id @default(uuid()) @db.Uuid
  product_id String           @db.Uuid
  quantity   Int              @default(0)
  discount   Int              @default(0)
  total      Int              @default(0)
  status     inventory_status @default(ACTIVE)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  // relations
  product    Product          @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // indexes
  @@index([product_id, status])

  @@map("inventory")
}

/**
 * Category model
 * Category is a model that represents the category of a product
 * It is used to track the category of a product
 */
model Category {
  id          String    @id @default(uuid()) @db.Uuid
  store_id    String    @db.Uuid
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // relations
  store       Store     @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  products    Product[]

  // indexes
  @@index([store_id])
  @@index([name])

  @@map("category")
}

/**
 * Tag model
 * Tag is a model that represents the tag of a product
 * It is used to track the tag of a product
 */
model Tag {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // relations
  products    Product[]

  // indexes
  @@index([name])

  @@map("tag")
}

model StockMovement {
  id         String              @id @default(uuid()) @db.Uuid
  product_id String              @db.Uuid
  quantity   Int
  type       stock_movement_type
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  // relations
  product    Product             @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // indexes
  @@index([product_id])

  @@map("stock_movement")
}

/**
 * Order model
 * Order is a model that represents the order of a product
 * It is used to track the order of a product
 */
model Order {
  id              String         @id @default(uuid()) @db.Uuid
  code            String?
  cashier_id      String         @db.Uuid
  customer_id     String?        @db.Uuid
  customer_name   String?
  // amount
  // the total amount of the order before discount and tax: subtotal_amount = quantity * price
  subtotal_amount Int            @default(0)
  // the total amount of the order after discount: discount_amount = subtotal_amount * discount_rate
  discount_amount Int            @default(0)
  // the total amount of the order after tax: tax_amount = subtotal_amount * tax_rate
  tax_amount      Int            @default(0)
  // the total amount of the order after discount and tax: total_amount = subtotal_amount - discount_amount + tax_amount
  total_amount    Int            @default(0)
  // payment
  payment_method  payment_method @default(CASH)
  status          order_status   @default(PENDING)
  // date
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  // relations
  cashier         User           @relation(fields: [cashier_id], references: [id], onDelete: Cascade)
  customer        Customer?      @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  order_item      OrderItem[]

  // indexes
  @@index([cashier_id])
  @@index([customer_id])
  @@index([status])

  @@map("order")
}

/**
 * Order item model
 * Order item is a model that represents the item of an order
 * It is used to track the item of an order
 */
model OrderItem {
  id         String   @id @default(uuid()) @db.Uuid
  order_id   String   @db.Uuid
  product_id String   @db.Uuid
  quantity   Int      @default(0)
  price      Int      @default(0)
  meta       Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // relations
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // indexes
  @@index([order_id])
  @@index([product_id])

  @@map("order_item")
}

model StatisticsDaily {
  id        String   @id @default(uuid()) @db.Uuid
  stat_date DateTime @default(now())
  store_id  String   @db.Uuid

  // Orders & revenue (from orders)
  orders_count           Int @default(0)
  paid_orders_count      Int @default(0)
  cancelled_orders_count Int @default(0)
  refunded_orders_count  Int @default(0)

  gross_revenue   Decimal @default(0.00) // sum(subtotal_amount) of orders (all status except CANCELLED)
  discounts_total Decimal @default(0.00) // sum(discount_amount)
  tax_total       Decimal @default(0.00) // sum(tax_amount)
  net_revenue     Decimal @default(0.00) // gross_revenue - discounts_total + tax_total (for valid orders, e.g. PAID/REFUNDED)

  // Stock & sales by unit (from stock_movements)
  units_sold      Int @default(0) // =-SUM(quantity) where type=SALE
  units_returned  Int @default(0) // =SUM(quantity) where type=RETURN_IN
  stock_in_units  Int @default(0) // Stock in units
  stock_out_units Int @default(0) // Stock out units
  stock_net_units Int @default(0) // stock_in_units - stock_out_units (total stock units)

  // Product
  product_created Int @default(0) // number of product created in the day
  active_product  Int @default(0) // snapshot at the end of the day

  // Note: Daily KPIs; sum from orders and stock_movements, no need order_items

  // relations
  store Store @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // indexes
  @@index([store_id])
  @@index([stat_date])

  @@map("statistics_daily")
}
